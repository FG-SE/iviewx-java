package iviewxapi;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.win32.StdCallLibrary.StdCallCallback;
import com.sun.jna.win32.StdCallLibrary;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
/**
 * JNA Wrapper for library <b>iViewXAPI</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface IViewXAPILibrary extends StdCallLibrary {
	public static final String JNA_LIBRARY_NAME = "iViewXAPI";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(IViewXAPILibrary.JNA_LIBRARY_NAME);
	public static final IViewXAPILibrary INSTANCE = (IViewXAPILibrary)Native.loadLibrary(IViewXAPILibrary.JNA_LIBRARY_NAME, IViewXAPILibrary.class);
	/**
	 * @enum ETDevice<br>
	 * <br>
	 * @brief The enumeration ETDevice can be used in connection with<br>
	 * @ref iV_GetSystemInfo to get information about which type of device is<br>
	 * connected to iView X or iView eye tracking server. It is part of the @ref SystemInfoStruct.<br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:196</i><br>
	 * enum values
	 */
	public static interface ETDevice {
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:199</i> */
		public static final int NONE = 0;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:202</i> */
		public static final int RED = 1;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:205</i> */
		public static final int REDm = 2;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:208</i> */
		public static final int HiSpeed = 3;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:211</i> */
		public static final int MRI = 4;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:214</i> */
		public static final int HED = 5;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:217</i> */
		public static final int Custom = 7;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:220</i> */
		public static final int REDn = 8;
	};
	/**
	 * @enum ETApplication<br>
	 * <br>
	 * @brief ETApplication can be used to start iView X, iView X OEM or iViewNGServer<br>
	 * (iView eye tracking server) application dependent to the used eye tracking<br>
	 * device. Set this as a parameter in @ref iV_Start function.<br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:230</i><br>
	 * enum values
	 */
	public static interface ETApplication {
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:233</i> */
		public static final int iViewX = 0;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:236</i> */
		public static final int iViewXOEM = 1;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:239</i> */
		public static final int iViewNG = 2;
	};
	/**
	 * @enum FilterType<br>
	 * <br>
	 * @brief FilterType can be used to select the filter that is used<br>
	 * with @ref iV_ConfigureFilter<br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:248</i><br>
	 * enum values
	 */
	public static interface FilterType {
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:253</i> */
		public static final int Average = 0;
	};
	/**
	 * @enum FilterAction<br>
	 * <br>
	 * @brief FilterType can be used to select the action that is performed<br>
	 * when calling @ref iV_ConfigureFilter<br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:262</i><br>
	 * enum values
	 */
	public static interface FilterAction {
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:265</i> */
		public static final int Query = 0;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:268</i> */
		public static final int Set = 1;
	};
	/**
	 * @enum CalibrationPointUsageStatusEnum<br>
	 * <br>
	 * @brief This enum provides information about whether a calibration point was<br>
	 * actually used for the calibration or the reason why it was not used.<br>
	 * Use @ref iV_GetCalibrationQuality to retrieve the calibration quality data<br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:278</i><br>
	 * enum values
	 */
	public static interface CalibrationPointUsageStatusEnum {
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:282</i> */
		public static final int calibrationPointUsed = 0;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:285</i> */
		public static final int calibrationPointUnused = 1;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:288</i> */
		public static final int calibrationPointUnusedBecauseOfTimeout = 2;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:291</i> */
		public static final int calibrationPointUnusedBecauseOfBadQuality = 3;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:294</i> */
		public static final int calibrationPointIgnored = 4;
	};
	/**
	 * @enum CalibrationStatusEnum<br>
	 * <br>
	 * @brief This enum provides information about the iView eye tracking server calibration status. If the<br>
	 * device is not calibrated the iView eye tracking server won't deliver valid gaze data. Use the functions<br>
	 * @ref iV_GetCalibrationStatus to retrieve the calibration status and<br>
	 * @ref iV_Calibrate to perform a calibration.<br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:305</i><br>
	 * enum values
	 */
	public static interface CalibrationStatusEnum {
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:308</i> */
		public static final int calibrationUnknown = 0;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:311</i> */
		public static final int calibrationInvalid = 1;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:314</i> */
		public static final int calibrationValid = 2;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:317</i> */
		public static final int calibrationInProgress = 3;
	};
	/**
	 * @enum REDGeometryEnum<br>
	 * <br>
	 * @brief uses to the define the content of @ref REDGeometryStruct<br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:325</i><br>
	 * enum values
	 */
	public static interface REDGeometryEnum {
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:328</i> */
		public static final int monitorIntegrated = 0;
		/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:331</i> */
		public static final int standalone = 1;
	};
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int RET_SUCCESS = (int)1;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int RET_NO_VALID_DATA = (int)2;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int RET_CALIBRATION_ABORTED = (int)3;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int RET_SERVER_IS_RUNNING = (int)4;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int RET_CALIBRATION_NOT_IN_PROGRESS = (int)5;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int RET_WINDOW_IS_OPEN = (int)11;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int RET_WINDOW_IS_CLOSED = (int)12;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_COULD_NOT_CONNECT = (int)100;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_NOT_CONNECTED = (int)101;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_NOT_CALIBRATED = (int)102;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_NOT_VALIDATED = (int)103;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_EYETRACKING_APPLICATION_NOT_RUNNING = (int)104;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_WRONG_COMMUNICATION_PARAMETER = (int)105;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_WRONG_DEVICE = (int)111;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_WRONG_PARAMETER = (int)112;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_WRONG_CALIBRATION_METHOD = (int)113;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_CALIBRATION_TIMEOUT = (int)114;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_TRACKING_NOT_STABLE = (int)115;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_INSUFFICIENT_BUFFER_SIZE = (int)116;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_CREATE_SOCKET = (int)121;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_CONNECT_SOCKET = (int)122;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_BIND_SOCKET = (int)123;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_DELETE_SOCKET = (int)124;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_NO_RESPONSE_FROM_IVIEWX = (int)131;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_INVALID_IVIEWX_VERSION = (int)132;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_WRONG_IVIEWX_VERSION = (int)133;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_ACCESS_TO_FILE = (int)171;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_SOCKET_CONNECTION = (int)181;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_EMPTY_DATA_BUFFER = (int)191;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_RECORDING_DATA_BUFFER = (int)192;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_FULL_DATA_BUFFER = (int)193;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_IVIEWX_IS_NOT_READY = (int)194;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_PAUSED_DATA_BUFFER = (int)195;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_IVIEWX_NOT_FOUND = (int)201;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_IVIEWX_PATH_NOT_FOUND = (int)202;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_IVIEWX_ACCESS_DENIED = (int)203;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_IVIEWX_ACCESS_INCOMPLETE = (int)204;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_IVIEWX_OUT_OF_MEMORY = (int)205;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_MULTIPLE_DEVICES = (int)206;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_CAMERA_NOT_FOUND = (int)211;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_WRONG_CAMERA = (int)212;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_WRONG_CAMERA_PORT = (int)213;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_USB2_CAMERA_PORT = (int)214;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_USB3_CAMERA_PORT = (int)215;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_COULD_NOT_OPEN_PORT = (int)220;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_COULD_NOT_CLOSE_PORT = (int)221;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_AOI_ACCESS = (int)222;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_AOI_NOT_DEFINED = (int)223;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_FEATURE_NOT_LICENSED = (int)250;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_DEPRECATED_FUNCTION = (int)300;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_INITIALIZATION = (int)400;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ERR_FUNC_NOT_LOADED = (int)401;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int LOG_LEVEL_BUG = (int)1;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int LOG_LEVEL_iV_FCT = (int)2;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int LOG_LEVEL_ALL_FCT = (int)4;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int LOG_LEVEL_IV_COMMAND = (int)8;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int LOG_LEVEL_RECV_IV_COMMAND = (int)16;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_EYE_LEFT = (int)0;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_EYE_RIGHT = (int)1;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_EYE_BOTH = (int)2;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_PUPIL_THRESHOLD = (int)0;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_REFLEX_THRESHOLD = (int)1;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_SHOW_AOI = (int)2;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_SHOW_CONTOUR = (int)3;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_SHOW_PUPIL = (int)4;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_SHOW_REFLEX = (int)5;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_DYNAMIC_THRESHOLD = (int)6;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_PUPIL_AREA = (int)11;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_PUPIL_PERIMETER = (int)12;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_PUPIL_DENSITY = (int)13;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_REFLEX_PERIMETER = (int)14;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_REFLEX_PUPIL_DISTANCE = (int)15;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_MONOCULAR = (int)16;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_SMARTBINOCULAR = (int)17;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_BINOCULAR = (int)18;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int ET_PARAM_SMARTTRACKING = (int)19;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int CALIBRATIONMETHOD_SMARTCALIBRATION = (int)0x80000000;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public static final int CALIBRATIONMETHOD_MASK = (int)0x0000FFFF;
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public interface pDLLSetCalibrationPoint extends StdCallLibrary.StdCallCallback {
		int apply(CalibrationPointStruct.ByValue calibrationPoint);
	};
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public interface pDLLSetAOIHit extends StdCallLibrary.StdCallCallback {
		int apply(int digitalOutoutValue);
	};
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public interface pDLLSetSample extends StdCallLibrary.StdCallCallback {
		int apply(SampleStruct.ByValue rawDataSample);
	};
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public interface pDLLSetEvent extends StdCallLibrary.StdCallCallback {
		int apply(EventStruct.ByValue eventDataSample);
	};
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public interface pDLLSetEyeImage extends StdCallLibrary.StdCallCallback {
		int apply(ImageStruct.ByValue eyeImage);
	};
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public interface pDLLSetSceneVideo extends StdCallLibrary.StdCallCallback {
		int apply(ImageStruct.ByValue sceneVideo);
	};
	/** <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h</i> */
	public interface pDLLSetTrackingMonitor extends StdCallLibrary.StdCallCallback {
		int apply(ImageStruct.ByValue trackingMonitor);
	};
	/**
	 * @brief Aborts a calibration or validation if one is in progress. If the calibration or<br>
	 * validation function is visualizing the calibration area the @ref iV_Calibrate or<br>
	 * @ref iV_Validate function will return with RET_CALIBRATION_ABORTED.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	RET_NO_VALID_DATA			no data available<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * Original signature : <code>int iV_AbortCalibration()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:966</i>
	 */
	int iV_AbortCalibration();
	/**
	 * @brief Abort waiting for fixation for a calibration or validation point when the calibration or<br>
	 * validation is in progress. If the latest calibration point has been accepted by the iView eye tracking server,<br>
	 * the acceptance will be undone and the point unused. This allows the clients to customize<br>
	 * the controlling logic of the calibration workflow, esp. when the calibration UI is<br>
	 * implemented by user.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * Original signature : <code>int iV_AbortCalibrationPoint()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:980</i>
	 */
	int iV_AbortCalibrationPoint();
	/**
	 * @brief Accepts a calibration or validation point if the calibration or validation is in progress.<br>
	 * The participant needs to be tracked and has to fixate the calibration or validation point.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	RET_NO_VALID_DATA			no data available<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * Original signature : <code>int iV_AcceptCalibrationPoint()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:993</i>
	 */
	int iV_AcceptCalibrationPoint();
	/**
	 * @brief Starts a calibration procedure. To proceed, the participant needs to be tracked and<br>
	 * has to fixate the calibration point. Depending on the calibration settings (which can<br>
	 * be changed using @ref iV_SetupCalibration) the user can accept the calibration points<br>
	 * manually (by pressing SPACE or calling @ref iV_AcceptCalibrationPoint) or abort the<br>
	 * calibration (by pressing ESC or calling @ref iV_AbortCalibration)<BR><br>
	 * If the calibration is visualized by the API (CalibrationStruct::visualization is set to 1)<br>
	 * the function won't return until the calibration has been finished (closed automatically)<br>
	 * or aborted (ESC).<BR><br>
	 * If the CalibrationStruct::visualization is set to 0, iV_Calibrate returns<br>
	 * immediately. The user has to care about the visualization of calibration points. Information<br>
	 * about the current calibration point can be retrieved with @ref iV_GetCurrentCalibrationPoint<br>
	 * or with setting up the calibration callback using @ref iV_SetCalibrationCallback.<BR><br>
	 * See also @listcalibration<br>
	 * <br>
	 * @retval	RET_SUCCESS						intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED				no connection established<br>
	 * @retval	ERR_WRONG_DEVICE				eye tracking device required for this function<br>
	 * 										is not connected<br>
	 * @retval	ERR_WRONG_CALIBRATION_METHOD	eye tracking device required for this<br>
	 * 										calibration method is not connected<br>
	 * Original signature : <code>int iV_Calibrate()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1017</i>
	 */
	int iV_Calibrate();
	/**
	 * @brief Changes the position of a calibration point. This has to be done before the calibration<br>
	 * process is started. The parameter number refers to the calibration method used.<br>
	 * If this function is used with a RED or RED-m device, the change is applied to the<br>
	 * currently selected profile.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	number						selected calibration point<br>
	 * @param	positionX					new X position on screen [pixel]<br>
	 * @param	positionY					new Y position on screen [pixel]<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_NO_RESPONSE_FROM_IVIEWX	no response from iView X; check<br>
	 * 									calibration name / identifier<br>
	 * Original signature : <code>int iV_ChangeCalibrationPoint(int, int, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1035</i>
	 */
	int iV_ChangeCalibrationPoint(int number, int positionX, int positionY);
	/**
	 * @brief Removes all trigger AOIs.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_AOI_ACCESS				failed to access AOI data<br>
	 * Original signature : <code>int iV_ClearAOI()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1044</i>
	 */
	int iV_ClearAOI();
	/**
	 * @brief Clears the recorded data buffer. The recording buffer needs to be stopped using "iV_StopRecording"<br>
	 * before it can be cleared.<br>
	 * If you are using an "HED", the scene video buffer is cleared, too.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_EMPTY_DATA_BUFFER		recording buffer is empty<br>
	 * @retval	ERR_RECORDING_DATA_BUFFER	recording is activated<br>
	 * @retval	ERR_PAUSED_DATA_BUFFER		recording is in pause state<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_ClearRecordingBuffer()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1062</i>
	 */
	int iV_ClearRecordingBuffer();
	/**
	 * @brief Queries or sets filter parameters.<br>
	 * The usage of the parameter data depends on the parameter action,<br>
	 * <br>
	 * @param	filter						filter type that is configured. See @ref FilterType<br>
	 * @param	action						type of action. See @ref FilterAction<br>
	 * @param	data						A void pointer that can be casted to a data type depending on filter type.<br>
	 * 									Please refer to @ref FilterType for details.<br>
	 * 									Content of the parameter depends on filter action, see @ref FilterType.<BR><br>
	 * 									FilterAction::Query: data is filled with current filter settings.<BR><br>
	 * 									FilterAction::Set: data is passed to configure the filter<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_ConfigureFilter(FilterType, FilterAction, void*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1081</i>
	 */
	int iV_ConfigureFilter(int filter, int action, Pointer data);
	/**
	 * @brief Establishes a connection to the iView eye tracking server. @ref iV_Connect will<br>
	 * not return until a connection has been established. If no connection can be<br>
	 * established, the function will return after the time span defined by<br>
	 * @ref iV_SetConnectionTimeout. Default time span is 3 seconds.<br>
	 * For systems running with SMI iViewRED 4.2 or higher, it is no longer required to<br>
	 * define the parameters <TT>recvIPAddress</TT> and <TT>receivePort</TT>.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @param	sendIPAddress							IP address of iView X computer<br>
	 * @param	sendPort								port being used by iView X SDK for sending data to iView X<br>
	 * @param	recvIPAddress							IP address of local computer<br>
	 * @param	receivePort								port being used by iView X SDK for receiving data from iView X<br>
	 * <br>
	 * @retval	RET_SUCCESS								intended functionality has been fulfilled<br>
	 * @retval	ERR_SERVER_NOT_FOUND					no iView eye tracking server detected<br>
	 * @retval	ERR_EYETRACKING_APPLICATION_NOT_RUNNING	no eye tracking application running<br>
	 * @retval	ERR_WRONG_PARAMETER						parameter out of range<br>
	 * @retval	ERR_COULD_NOT_CONNECT					failed to establish connection<br>
	 * Original signature : <code>int iV_Connect(char*, int, char*, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1103</i><br>
	 * @deprecated use the safer methods {@link #iV_Connect(java.nio.ByteBuffer, int, java.nio.ByteBuffer, int)} and {@link #iV_Connect(com.sun.jna.Pointer, int, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int iV_Connect(Pointer sendIPAddress, int sendPort, Pointer recvIPAddress, int receivePort);
	/**
	 * @brief Establishes a connection to the iView eye tracking server. @ref iV_Connect will<br>
	 * not return until a connection has been established. If no connection can be<br>
	 * established, the function will return after the time span defined by<br>
	 * @ref iV_SetConnectionTimeout. Default time span is 3 seconds.<br>
	 * For systems running with SMI iViewRED 4.2 or higher, it is no longer required to<br>
	 * define the parameters <TT>recvIPAddress</TT> and <TT>receivePort</TT>.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @param	sendIPAddress							IP address of iView X computer<br>
	 * @param	sendPort								port being used by iView X SDK for sending data to iView X<br>
	 * @param	recvIPAddress							IP address of local computer<br>
	 * @param	receivePort								port being used by iView X SDK for receiving data from iView X<br>
	 * <br>
	 * @retval	RET_SUCCESS								intended functionality has been fulfilled<br>
	 * @retval	ERR_SERVER_NOT_FOUND					no iView eye tracking server detected<br>
	 * @retval	ERR_EYETRACKING_APPLICATION_NOT_RUNNING	no eye tracking application running<br>
	 * @retval	ERR_WRONG_PARAMETER						parameter out of range<br>
	 * @retval	ERR_COULD_NOT_CONNECT					failed to establish connection<br>
	 * Original signature : <code>int iV_Connect(char*, int, char*, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1103</i>
	 */
	int iV_Connect(ByteBuffer sendIPAddress, int sendPort, ByteBuffer recvIPAddress, int receivePort);
	/**
	 * @brief Establishes a connection to the iView eye tracking server. iV_ConnectLocal will<br>
	 * not return until a connection has been established. If no connection can be<br>
	 * established the function will return after the time span defined by<br>
	 * @ref iV_SetConnectionTimeout. Default time span is 3 seconds.<BR><br>
	 * iV_ConnectLocal can only connect with RED-m or RED-OEM devices connected to<br>
	 * the same PC.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @retval	RET_SUCCESS								intended functionality has been fulfilled<br>
	 * @retval	ERR_SERVER_NOT_FOUND					no iView eye tracking server detected<br>
	 * @retval	ERR_EYETRACKING_APPLICATION_NOT_RUNNING	no eye tracking application running<br>
	 * @retval	ERR_COULD_NOT_CONNECT					failed to establish connection<br>
	 * Original signature : <code>int iV_ConnectLocal()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1119</i>
	 */
	int iV_ConnectLocal();
	/**
	 * @brief Wakes up and enables the eye tracking application from suspend mode to<br>
	 * continue processing gaze data. The application can be set to suspend mode<br>
	 * by calling @ref iV_PauseEyetracking<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * Original signature : <code>int iV_ContinueEyetracking()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1129</i>
	 */
	int iV_ContinueEyetracking();
	/**
	 * @brief Continues gaze data recording. A HED video recording can neither be paused nor continued.<br>
	 * @ref iV_ContinueRecording does not return until gaze recording is continued. Before<br>
	 * it can be continued, the data needs to be paused using.<br>
	 * @ref iV_PauseRecording. Additionally this function allows a message to be stored inside the<br>
	 * idf data buffer.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @param	etMessage					text message that will be written to data file<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_EMPTY_DATA_BUFFER		recording buffer is empty<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_ContinueRecording(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1148</i><br>
	 * @deprecated use the safer methods {@link #iV_ContinueRecording(java.nio.ByteBuffer)} and {@link #iV_ContinueRecording(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_ContinueRecording(Pointer etMessage);
	/**
	 * @brief Continues gaze data recording. A HED video recording can neither be paused nor continued.<br>
	 * @ref iV_ContinueRecording does not return until gaze recording is continued. Before<br>
	 * it can be continued, the data needs to be paused using.<br>
	 * @ref iV_PauseRecording. Additionally this function allows a message to be stored inside the<br>
	 * idf data buffer.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @param	etMessage					text message that will be written to data file<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_EMPTY_DATA_BUFFER		recording buffer is empty<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_ContinueRecording(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1148</i>
	 */
	int iV_ContinueRecording(ByteBuffer etMessage);
	/**
	 * @brief Defines an AOI. The API can handle up to 20 AOIs.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiData					see reference information for @ref AOIStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_DefineAOI(AOIStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1159</i>
	 */
	int iV_DefineAOI(AOIStruct aoiData);
	/**
	 * @brief Selects a port for sending out TTL trigger.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	port					port address<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * @retval	ERR_COULD_NOT_OPEN_PORT	failed to open port<br>
	 * Original signature : <code>int iV_DefineAOIPort(int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1171</i>
	 */
	int iV_DefineAOIPort(int port);
	/**
	 * @brief Deletes the RED-m geometry setup with the given name. It is not possible<br>
	 * to delete a geometry profile if it is currently in use. See chapter<br>
	 * @ref redgeometry in the iView X SDK Manual.<br>
	 * <br>
	 * @param	setupName					name of the geometry setup which will be deleted<br>
	 * <br>
	 * @retval RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval ERR_NOT_CONNECTED			no connection established<br>
	 * @retval ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval ERR_WRONG_DEVICE				eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_DeleteREDGeometry(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1187</i><br>
	 * @deprecated use the safer methods {@link #iV_DeleteREDGeometry(java.nio.ByteBuffer)} and {@link #iV_DeleteREDGeometry(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_DeleteREDGeometry(Pointer setupName);
	/**
	 * @brief Deletes the RED-m geometry setup with the given name. It is not possible<br>
	 * to delete a geometry profile if it is currently in use. See chapter<br>
	 * @ref redgeometry in the iView X SDK Manual.<br>
	 * <br>
	 * @param	setupName					name of the geometry setup which will be deleted<br>
	 * <br>
	 * @retval RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval ERR_NOT_CONNECTED			no connection established<br>
	 * @retval ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval ERR_WRONG_DEVICE				eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_DeleteREDGeometry(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1187</i>
	 */
	int iV_DeleteREDGeometry(ByteBuffer setupName);
	/**
	 * @brief Disables all AOIs with the given name.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiName						name of the AOI which will be disabled<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA			no data available<br>
	 * @retval	ERR_AOI_ACCESS				failed to access AOI data<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_DisableAOI(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1200</i><br>
	 * @deprecated use the safer methods {@link #iV_DisableAOI(java.nio.ByteBuffer)} and {@link #iV_DisableAOI(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_DisableAOI(Pointer aoiName);
	/**
	 * @brief Disables all AOIs with the given name.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiName						name of the AOI which will be disabled<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA			no data available<br>
	 * @retval	ERR_AOI_ACCESS				failed to access AOI data<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_DisableAOI(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1200</i>
	 */
	int iV_DisableAOI(ByteBuffer aoiName);
	/**
	 * @brief Disables an AOI group.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiGroup					name of the AOI group which will be disabled<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA			no data available<br>
	 * @retval	ERR_AOI_ACCESS				failed to access AOI data<br>
	 * Original signature : <code>int iV_DisableAOIGroup(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1212</i><br>
	 * @deprecated use the safer methods {@link #iV_DisableAOIGroup(java.nio.ByteBuffer)} and {@link #iV_DisableAOIGroup(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_DisableAOIGroup(Pointer aoiGroup);
	/**
	 * @brief Disables an AOI group.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiGroup					name of the AOI group which will be disabled<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA			no data available<br>
	 * @retval	ERR_AOI_ACCESS				failed to access AOI data<br>
	 * Original signature : <code>int iV_DisableAOIGroup(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1212</i>
	 */
	int iV_DisableAOIGroup(ByteBuffer aoiGroup);
	/**
	 * @brief Disables the raw data filter. The gaze data filter can be enabled<br>
	 * using @ref iV_EnableGazeDataFilter.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_DisableGazeDataFilter()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1221</i>
	 */
	int iV_DisableGazeDataFilter();
	/**
	 * @brief Disables a CPU high performance mode allowing the CPU to reduce the performance.<br>
	 * See also @ref iV_EnableProcessorHighPerformanceMode<br>
	 * <br>
	 * @retval	RET_SUCCESS			intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED	no connection established<br>
	 * Original signature : <code>int iV_DisableProcessorHighPerformanceMode()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1230</i>
	 */
	int iV_DisableProcessorHighPerformanceMode();
	/**
	 * @brief Disconnects from iView eye tracking server. @ref iV_Disconnect will not<br>
	 * return until the connection has been disconnected. After this function has<br>
	 * been called no other function or device can communicate with<br>
	 * iView eye tracking server.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_DELETE_SOCKET		failed to delete sockets<br>
	 * Original signature : <code>int iV_Disconnect()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1242</i>
	 */
	int iV_Disconnect();
	/**
	 * @brief Enables all AOIs with the given name.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiName					name of the AOI which will be enabled<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_AOI_ACCESS			failed to access AOI data<br>
	 * Original signature : <code>int iV_EnableAOI(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1254</i><br>
	 * @deprecated use the safer methods {@link #iV_EnableAOI(java.nio.ByteBuffer)} and {@link #iV_EnableAOI(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_EnableAOI(Pointer aoiName);
	/**
	 * @brief Enables all AOIs with the given name.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiName					name of the AOI which will be enabled<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_AOI_ACCESS			failed to access AOI data<br>
	 * Original signature : <code>int iV_EnableAOI(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1254</i>
	 */
	int iV_EnableAOI(ByteBuffer aoiName);
	/**
	 * @brief Enables an AOI group.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiGroup				name of the AOI group which will be enabled<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_AOI_ACCESS			failed to access AOI data<br>
	 * Original signature : <code>int iV_EnableAOIGroup(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1266</i><br>
	 * @deprecated use the safer methods {@link #iV_EnableAOIGroup(java.nio.ByteBuffer)} and {@link #iV_EnableAOIGroup(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_EnableAOIGroup(Pointer aoiGroup);
	/**
	 * @brief Enables an AOI group.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiGroup				name of the AOI group which will be enabled<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_AOI_ACCESS			failed to access AOI data<br>
	 * Original signature : <code>int iV_EnableAOIGroup(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1266</i>
	 */
	int iV_EnableAOIGroup(ByteBuffer aoiGroup);
	/**
	 * @brief Enables a gaze data filter. This API bilateral filter was implemented due<br>
	 * to special HCI application requirements. The gaze data filter can be disabled<br>
	 * using @ref iV_DisableGazeDataFilter.<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * Original signature : <code>int iV_EnableGazeDataFilter()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1275</i>
	 */
	int iV_EnableGazeDataFilter();
	/**
	 * @brief Enables a CPU high performance mode to prevent the CPU from reducing the performance.<br>
	 * See also @ref iV_DisableProcessorHighPerformanceMode<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_EnableProcessorHighPerformanceMode()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1285</i>
	 */
	int iV_EnableProcessorHighPerformanceMode();
	/**
	 * @brief Updates @ref AccuracyStruct accuracyData with validated accuracy results. Before<br>
	 * accuracy data is accessible the accuracy needs to be validated with<br>
	 * @ref iV_Validate. If the parameter <TT>visualization</TT> is set to <TT>1</TT> the accuracy<br>
	 * data will be visualized in a dialog window.<br>
	 * See also @listvalidation and the chapter @ref validation in the iView X SDK Manual.<br>
	 * <br>
	 * @param	accuracyData			see reference information for @ref AccuracyStruct<br>
	 * @param	visualization			0: no visualization<br>
	 * 								1: accuracy data will be visualized in a dialog window<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_NOT_CALIBRATED		system is not calibrated<br>
	 * @retval	ERR_NOT_VALIDATED		system is not validated<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_GetAccuracy(AccuracyStruct*, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1305</i>
	 */
	int iV_GetAccuracy(AccuracyStruct accuracyData, int visualization);
	/**
	 * @brief Updates <TT>imageData</TT> struct with drawn accuracy results. Before<br>
	 * accuracy data is accessible the accuracy needs to be validated with<br>
	 * @ref iV_Validate.<br>
	 * See also @listvalidation and the chapter @ref validation in the iView X SDK Manual.<br>
	 * <br>
	 * @param	imageData				see reference information for @ref ImageStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_NOT_CALIBRATED		system is not calibrated<br>
	 * @retval	ERR_NOT_VALIDATED		system is not validated<br>
	 * Original signature : <code>int iV_GetAccuracyImage(ImageStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1320</i>
	 */
	int iV_GetAccuracyImage(ImageStruct imageData);
	/**
	 * @brief Gives back the AOI value<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiOutputValue			provides the AOI output value<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_AOI_NOT_DEFINED		no defined AOI found<br>
	 * Original signature : <code>int iV_GetAOIOutputValue(int*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1332</i><br>
	 * @deprecated use the safer methods {@link #iV_GetAOIOutputValue(java.nio.IntBuffer)} and {@link #iV_GetAOIOutputValue(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int iV_GetAOIOutputValue(IntByReference aoiOutputValue);
	/**
	 * @brief Gives back the AOI value<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiOutputValue			provides the AOI output value<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_AOI_NOT_DEFINED		no defined AOI found<br>
	 * Original signature : <code>int iV_GetAOIOutputValue(int*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1332</i>
	 */
	int iV_GetAOIOutputValue(IntBuffer aoiOutputValue);
	/**
	 * @brief Retrieves the available LPT ports from the computer running the eye tracking server<br>
	 * which can be used for LPT data recording. The caller has to supply a sufficiently large<br>
	 * string buffer to the function. The buffer is filled with a string list containing the names<br>
	 * of the available LPT port, separated by a semi colon (';'). An empty string indicates that<br>
	 * there are no suitable LPT ports available.<br>
	 * <br>
	 * <br>
	 * @param	buffer					The buffer that is filled with a list of available<br>
	 * 									LPT port names, separated by a semi colon (';')<br>
	 * @param	bufferSize				pointer to a variable that contains the size of the buffer<br>
	 * 									in bytes; when the function returns with RET_SUCCESS, the variable<br>
	 * 									will contain the size of the used buffer, including the terminating<br>
	 * 									'\0' character<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_INSUFFICIENT_BUFFER_SIZE	the provided buffer is to small and has not been altered<br>
	 * @retval	ERR_WRONG_PARAMETER		either the buffer or bufferSize parameter are NULL<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_GetAvailableLptPorts(char*, int*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1354</i><br>
	 * @deprecated use the safer methods {@link #iV_GetAvailableLptPorts(java.nio.ByteBuffer, java.nio.IntBuffer)} and {@link #iV_GetAvailableLptPorts(com.sun.jna.Pointer, com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int iV_GetAvailableLptPorts(Pointer buffer, IntByReference bufferSize);
	/**
	 * @brief Retrieves the available LPT ports from the computer running the eye tracking server<br>
	 * which can be used for LPT data recording. The caller has to supply a sufficiently large<br>
	 * string buffer to the function. The buffer is filled with a string list containing the names<br>
	 * of the available LPT port, separated by a semi colon (';'). An empty string indicates that<br>
	 * there are no suitable LPT ports available.<br>
	 * <br>
	 * <br>
	 * @param	buffer					The buffer that is filled with a list of available<br>
	 * 									LPT port names, separated by a semi colon (';')<br>
	 * @param	bufferSize				pointer to a variable that contains the size of the buffer<br>
	 * 									in bytes; when the function returns with RET_SUCCESS, the variable<br>
	 * 									will contain the size of the used buffer, including the terminating<br>
	 * 									'\0' character<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_INSUFFICIENT_BUFFER_SIZE	the provided buffer is to small and has not been altered<br>
	 * @retval	ERR_WRONG_PARAMETER		either the buffer or bufferSize parameter are NULL<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_GetAvailableLptPorts(char*, int*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1354</i>
	 */
	int iV_GetAvailableLptPorts(ByteBuffer buffer, IntBuffer bufferSize);
	/**
	 * @brief Updates stored <TT>calibrationData</TT> information with currently selected parameters.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	calibrationData			see reference information for @ref CalibrationStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_GetCalibrationParameter(CalibrationStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1365</i>
	 */
	int iV_GetCalibrationParameter(CalibrationStruct calibrationData);
	/**
	 * @brief Delivers information about a calibration point.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	calibrationPointNumber	number of requested calibration point<br>
	 * @param	calibrationPoint		information of requested calibration point, stored in @ref CalibrationPointStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_GetCalibrationPoint(int, CalibrationPointStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1377</i>
	 */
	int iV_GetCalibrationPoint(int calibrationPointNumber, CalibrationPointStruct calibrationPoint);
	/**
	 * @brief Delivers fixation quality information about a calibration point. If<br>
	 * the output data holder is NULL, simply no data will be returned.<br>
	 * <br>
	 * @param	calibrationPointNumber	number of requested calibration point<br>
	 * @param	left					requested quality information for the left eye, stored in @ref CalibrationPointQualityStruct<br>
	 * @param	right					requested quality information for the right eye, stored in @ref CalibrationPointQualityStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_GetCalibrationQuality(int, CalibrationPointQualityStruct*, CalibrationPointQualityStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1391</i>
	 */
	int iV_GetCalibrationQuality(int calibrationPointNumber, CalibrationPointQualityStruct left, CalibrationPointQualityStruct right);
	/**
	 * @brief Updates <TT>imageData</TT> struct with drawn calibration quality<br>
	 * data. Calibration is required before calling this function.<br>
	 * <br>
	 * @param	imageData				see reference information for @ref ImageStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_NOT_CALIBRATED		system is not calibrated<br>
	 * Original signature : <code>int iV_GetCalibrationQualityImage(ImageStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1404</i>
	 */
	int iV_GetCalibrationQualityImage(ImageStruct imageData);
	/**
	 * @brief Updates <TT>calibrationStatus</TT> information. The client needs to be connected<br>
	 * to the iView eye tracking server.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	calibrationStatus						see reference information for @ref CalibrationStatusEnum<br>
	 * <br>
	 * @retval	RET_SUCCESS								intended functionality has been fulfilled<br>
	 * @retval	RET_DATA_INVALID						no new data available<br>
	 * @retval	ERR_CONNECTION_NOT_ESTABLISHED			no connection established<br>
	 * Original signature : <code>int iV_GetCalibrationStatus(CalibrationStatusEnum*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1417</i><br>
	 * @deprecated use the safer methods {@link #iV_GetCalibrationStatus(java.nio.IntBuffer)} and {@link #iV_GetCalibrationStatus(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int iV_GetCalibrationStatus(IntByReference calibrationStatus);
	/**
	 * @brief Updates <TT>calibrationStatus</TT> information. The client needs to be connected<br>
	 * to the iView eye tracking server.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	calibrationStatus						see reference information for @ref CalibrationStatusEnum<br>
	 * <br>
	 * @retval	RET_SUCCESS								intended functionality has been fulfilled<br>
	 * @retval	RET_DATA_INVALID						no new data available<br>
	 * @retval	ERR_CONNECTION_NOT_ESTABLISHED			no connection established<br>
	 * Original signature : <code>int iV_GetCalibrationStatus(CalibrationStatusEnum*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1417</i>
	 */
	int iV_GetCalibrationStatus(IntBuffer calibrationStatus);
	/**
	 * @brief Updates data in @ref CalibrationPointStruct <TT>currentCalibrationPoint</TT><br>
	 * with current calibration point data.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	currentCalibrationPoint	information of requested calibration point, stored in @ref CalibrationPointStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no new data available<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_GetCurrentCalibrationPoint(CalibrationPointStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1430</i>
	 */
	int iV_GetCurrentCalibrationPoint(CalibrationPointStruct currentCalibrationPoint);
	/**
	 * @brief Gets the currently loaded RED geometry. See chapter @ref redgeometry in the iView X SDK Manual<br>
	 * and @listgeometry<br>
	 * <br>
	 * @retval	RET_SUCCESS								intended functionality has been fulfilled<br>
	 * @retval	ERR_CONNECTION_NOT_ESTABLISHED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE						eye tracking device required for this function<br>
	 * 												is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED				feature not covered by your license<br>
	 * Original signature : <code>int iV_GetCurrentREDGeometry(REDGeometryStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1442</i>
	 */
	int iV_GetCurrentREDGeometry(REDGeometryStruct redGeometry);
	/**
	 * @brief Provides the current eye tracker timestamp in microseconds.<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	currentTimestamp			information of requested time stamp<br>
	 * <br>
	 * @retval RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval RET_NO_VALID_DATA			no new data available<br>
	 * @retval ERR_NOT_CONNECTED			no connection established<br>
	 * Original signature : <code>int iV_GetCurrentTimestamp(long long*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1454</i><br>
	 * @deprecated use the safer methods {@link #iV_GetCurrentTimestamp(java.nio.LongBuffer)} and {@link #iV_GetCurrentTimestamp(com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int iV_GetCurrentTimestamp(LongByReference currentTimestamp);
	/**
	 * @brief Provides the current eye tracker timestamp in microseconds.<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	currentTimestamp			information of requested time stamp<br>
	 * <br>
	 * @retval RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval RET_NO_VALID_DATA			no new data available<br>
	 * @retval ERR_NOT_CONNECTED			no connection established<br>
	 * Original signature : <code>int iV_GetCurrentTimestamp(long long*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1454</i>
	 */
	int iV_GetCurrentTimestamp(LongBuffer currentTimestamp);
	/**
	 * @brief Updated the device name information of the connected device.<br>
	 * <br>
	 * @param	deviceName				the name of the requested device<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_WRONG_DEVICE		eye tracking device required for this function<br>
	 * 								is not connected<br>
	 * Original signature : <code>int iV_GetDeviceName(char[64])</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1467</i><br>
	 * @deprecated use the safer methods {@link #iV_GetDeviceName(java.nio.ByteBuffer)} and {@link #iV_GetDeviceName(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_GetDeviceName(Pointer deviceName);
	/**
	 * @brief Updated the device name information of the connected device.<br>
	 * <br>
	 * @param	deviceName				the name of the requested device<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_WRONG_DEVICE		eye tracking device required for this function<br>
	 * 								is not connected<br>
	 * Original signature : <code>int iV_GetDeviceName(char[64])</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1467</i>
	 */
	int iV_GetDeviceName(ByteBuffer deviceName);
	/**
	 * @brief Updates data from @ref EventStruct <TT>eventDataSample</TT> with current event data.<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	eventDataSample				see reference information for @ref EventStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA			no new data available<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_GetEvent(EventStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1480</i>
	 */
	int iV_GetEvent(EventStruct eventDataSample);
	/**
	 * @brief Updates data from @ref EventStruct32 <TT>eventDataSample</TT> with current event data.<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	eventDataSample				see reference information for @ref EventStruct32<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA			no new data available<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_GetEvent32(EventStruct32*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1493</i>
	 */
	int iV_GetEvent32(EventStruct32 eventDataSample);
	/**
	 * @brief Updates <TT>imageData</TT> with current eye image<br>
	 * <br>
	 * @param	imageData					see reference information for @ref ImageStruct<br>
	 * <br>
	 * @retval RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval RET_NO_VALID_DATA			no new data available<br>
	 * @retval ERR_NOT_CONNECTED			no connection established<br>
	 * @retval ERR_WRONG_DEVICE				eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_GetEyeImage(ImageStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1507</i>
	 */
	int iV_GetEyeImage(ImageStruct imageData);
	/**
	 * @brief Gets the device specific feature key. Used for RED-OEM devices only.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * Original signature : <code>int iV_GetFeatureKey(long long*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1517</i><br>
	 * @deprecated use the safer methods {@link #iV_GetFeatureKey(java.nio.LongBuffer)} and {@link #iV_GetFeatureKey(com.sun.jna.ptr.LongByReference)} instead
	 */
	@Deprecated 
	int iV_GetFeatureKey(LongByReference featureKey);
	/**
	 * @brief Gets the device specific feature key. Used for RED-OEM devices only.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * Original signature : <code>int iV_GetFeatureKey(long long*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1517</i>
	 */
	int iV_GetFeatureKey(LongBuffer featureKey);
	/**
	 * @brief Retrieve gaze quality data.<br>
	 * Fills @ref GazeChannelQualityStruct qualityData with validated accuracy results. Before<br>
	 * quality data is accessible the system needs to be validated with @ref iV_Validate.<br>
	 * See also @listvalidation and the chapter @ref validation in the iView X SDK Manual.<br>
	 * <br>
	 * @param	qualityData				see reference information for @ref GazeChannelQualityStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_NOT_CALIBRATED		system is not calibrated<br>
	 * @retval	ERR_NOT_VALIDATED		system is not validated<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_GetGazeChannelQuality(GazeChannelQualityStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1534</i>
	 */
	int iV_GetGazeChannelQuality(GazeChannelQualityStruct qualityData);
	/**
	 * @brief Gets all available profiles by name. They will be written comma-separated<br>
	 * in the char buffer. The user needs to be sure that the buffer is not smaller<br>
	 * than the needed buffer length. See chapter @ref redgeometry<br>
	 * in the iView X SDK Manual and @listgeometry<br>
	 * <br>
	 * @param	maxSize					the length of the string profileNames<br>
	 * @param	profileNames			an empty string where profile names will be put in<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * @retval	ERR_WRONG_DEVICE		eye tracking device required for this<br>
	 * 								function is not connected<br>
	 * Original signature : <code>int iV_GetGeometryProfiles(int, char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1551</i><br>
	 * @deprecated use the safer methods {@link #iV_GetGeometryProfiles(int, java.nio.ByteBuffer)} and {@link #iV_GetGeometryProfiles(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_GetGeometryProfiles(int maxSize, Pointer profileNames);
	/**
	 * @brief Gets all available profiles by name. They will be written comma-separated<br>
	 * in the char buffer. The user needs to be sure that the buffer is not smaller<br>
	 * than the needed buffer length. See chapter @ref redgeometry<br>
	 * in the iView X SDK Manual and @listgeometry<br>
	 * <br>
	 * @param	maxSize					the length of the string profileNames<br>
	 * @param	profileNames			an empty string where profile names will be put in<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * @retval	ERR_WRONG_DEVICE		eye tracking device required for this<br>
	 * 								function is not connected<br>
	 * Original signature : <code>int iV_GetGeometryProfiles(int, char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1551</i>
	 */
	int iV_GetGeometryProfiles(int maxSize, ByteBuffer profileNames);
	/**
	 * @brief Gets the system license expiration date. The license will not expire if the<br>
	 * license is set to 00.00.0000.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_GetLicenseDueDate(DateStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1561</i>
	 */
	int iV_GetLicenseDueDate(DateStruct licenseDueDate);
	/**
	 * @brief Gets the geometry data of a requested profile without selecting them.<br>
	 * See chapter @ref redgeometry<br>
	 * in the iView X SDK Manual and @listgeometry<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_GetREDGeometry(char*, REDGeometryStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1575</i><br>
	 * @deprecated use the safer methods {@link #iV_GetREDGeometry(java.nio.ByteBuffer, iviewxapi.REDGeometryStruct)} and {@link #iV_GetREDGeometry(com.sun.jna.Pointer, iviewxapi.REDGeometryStruct)} instead
	 */
	@Deprecated 
	int iV_GetREDGeometry(Pointer profileName, REDGeometryStruct redGeometry);
	/**
	 * @brief Gets the geometry data of a requested profile without selecting them.<br>
	 * See chapter @ref redgeometry<br>
	 * in the iView X SDK Manual and @listgeometry<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_GetREDGeometry(char*, REDGeometryStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1575</i>
	 */
	int iV_GetREDGeometry(ByteBuffer profileName, REDGeometryStruct redGeometry);
	/**
	 * @brief Updates data in SampleStruct <TT>rawDataSample</TT> with current eye tracking data.<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	rawDataSample			see reference information for @ref SampleStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no new data available<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_GetSample(SampleStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1587</i>
	 */
	int iV_GetSample(SampleStruct rawDataSample);
	/**
	 * @brief Updates data in SampleStruct32 <TT>rawDataSample</TT> with current eye tracking data sample.<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	rawDataSample			see reference information for @ref SampleStruct32<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no new data available<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_GetSample32(SampleStruct32*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1599</i>
	 */
	int iV_GetSample32(SampleStruct32 rawDataSample);
	/**
	 * @brief Updates @ref ImageStruct <TT>imageData</TT> with current scene video image.<br>
	 * This functions is available for HED only.<br>
	 * <br>
	 * @param	imageData				see reference information for @ref ImageStruct<br>
	 * <br>
	 * @retval RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval RET_NO_VALID_DATA		no new data available<br>
	 * @retval ERR_NOT_CONNECTED		no connection established<br>
	 * @retval ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 								is not connected<br>
	 * Original signature : <code>int iV_GetSceneVideo(ImageStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1613</i>
	 */
	int iV_GetSceneVideo(ImageStruct imageData);
	/**
	 * @brief Retrieve the serial number information of the connected device.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @param	serialNumber				the serial number of the requested device<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA			no data available<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_WRONG_IVIEWX_VERSION	wrong version of iView X<br>
	 * Original signature : <code>int iV_GetSerialNumber(char[64])</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1628</i><br>
	 * @deprecated use the safer methods {@link #iV_GetSerialNumber(java.nio.ByteBuffer)} and {@link #iV_GetSerialNumber(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_GetSerialNumber(Pointer serialNumber);
	/**
	 * @brief Retrieve the serial number information of the connected device.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @param	serialNumber				the serial number of the requested device<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA			no data available<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_WRONG_IVIEWX_VERSION	wrong version of iView X<br>
	 * Original signature : <code>int iV_GetSerialNumber(char[64])</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1628</i>
	 */
	int iV_GetSerialNumber(ByteBuffer serialNumber);
	/**
	 * @brief This function retrieves the speed modes used and supported by the connected iView eye tracking server.<br>
	 * <br>
	 * @retval RET_SUCCESS			intended functionality has been fulfilled<br>
	 * @retval ERR_WRONG_PARAMTER	the requested speed mode is not supported by the connected device<br>
	 * @retval ERR_NOT_CONNECTED	no connection established<br>
	 * @retval ERR_WRONG_DEVICE		eye tracking device required for this function is not connected<br>
	 * Original signature : <code>int iV_GetSpeedModes(SpeedModeStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1638</i>
	 */
	int iV_GetSpeedModes(SpeedModeStruct speedModes);
	/**
	 * @brief Query system information.<br>
	 * @ref SystemInfoStruct systemInfoData is updated with current system information.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @param	systemInfoData			see reference information for @ref SystemInfoStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * Original signature : <code>int iV_GetSystemInfo(SystemInfoStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1650</i>
	 */
	int iV_GetSystemInfo(SystemInfoStruct systemInfoData);
	/**
	 * @brief 	Updates @ref ImageStruct <TT>imageData</TT> with current tracking monitor image<br>
	 * <br>
	 * @param	imageData				see reference information for @ref ImageStruct<br>
	 * <br>
	 * @retval RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval RET_NO_VALID_DATA		no new data available<br>
	 * @retval ERR_NOT_CONNECTED		no connection established<br>
	 * @retval ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 								is not connected<br>
	 * Original signature : <code>int iV_GetTrackingMonitor(ImageStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1663</i>
	 */
	int iV_GetTrackingMonitor(ImageStruct imageData);
	/**
	 * @brief Updates TrackingStatusStruct <TT>trackingStatus</TT> with current tracking status.<br>
	 * <br>
	 * @param	trackingStatus			see reference information for @ref TrackingStatusStruct<br>
	 * <br>
	 * @retval RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval RET_NO_VALID_DATA		no new data available<br>
	 * @retval ERR_NOT_CONNECTED		no connection established<br>
	 * @retval ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 								is not connected<br>
	 * Original signature : <code>int iV_GetTrackingStatus(TrackingStatusStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1676</i>
	 */
	int iV_GetTrackingStatus(TrackingStatusStruct trackingStatus);
	/**
	 * @brief Gets the interaction keys during the calibration and validation process. If enableKeys<br>
	 * is set to 0 all available user interaction (SPACE for accepting calibration/validation<br>
	 * points and ESC for aborting calibration/validation) are disabled.<br>
	 * See also @listvalidation @listcalibration<br>
	 * Original signature : <code>int iV_GetUseCalibrationKeys(int*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1685</i><br>
	 * @deprecated use the safer methods {@link #iV_GetUseCalibrationKeys(java.nio.IntBuffer)} and {@link #iV_GetUseCalibrationKeys(com.sun.jna.ptr.IntByReference)} instead
	 */
	@Deprecated 
	int iV_GetUseCalibrationKeys(IntByReference enableKeys);
	/**
	 * @brief Gets the interaction keys during the calibration and validation process. If enableKeys<br>
	 * is set to 0 all available user interaction (SPACE for accepting calibration/validation<br>
	 * points and ESC for aborting calibration/validation) are disabled.<br>
	 * See also @listvalidation @listcalibration<br>
	 * Original signature : <code>int iV_GetUseCalibrationKeys(int*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1685</i>
	 */
	int iV_GetUseCalibrationKeys(IntBuffer enableKeys);
	/**
	 * @brief Hides accuracy monitor window which can be opened by @ref iV_ShowAccuracyMonitor.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_WINDOW_IS_CLOSED		window is already closed<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * Original signature : <code>int iV_HideAccuracyMonitor()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1694</i>
	 */
	int iV_HideAccuracyMonitor();
	/**
	 * @brief Hides eye image monitor window which can be opened by @ref iV_ShowEyeImageMonitor.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_WINDOW_IS_CLOSED		window is already closed<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_HideEyeImageMonitor()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1704</i>
	 */
	int iV_HideEyeImageMonitor();
	/**
	 * @brief Hides scene video monitor window which can be opened by @ref iV_ShowSceneVideoMonitor.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_WINDOW_IS_CLOSED		window is already closed<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * Original signature : <code>int iV_HideSceneVideoMonitor()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1713</i>
	 */
	int iV_HideSceneVideoMonitor();
	/**
	 * @brief Hides tracking monitor window which can be opened by @ref iV_ShowTrackingMonitor.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_WINDOW_IS_CLOSED		window is already closed<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * Original signature : <code>int iV_HideTrackingMonitor()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1722</i>
	 */
	int iV_HideTrackingMonitor();
	/**
	 * @brief Checks if connection to iView eye tracking server is still established.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_IsConnected()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1731</i>
	 */
	int iV_IsConnected();
	/**
	 * @brief Loads a previously saved calibration. A calibration has to be saved by using<br>
	 * @ref iV_SaveCalibration.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	name						calibration name / identifier<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_IVIEWX_VERSION	wrong version of iView X<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * @retval	ERR_NO_RESPONSE_FROM_IVIEWX	no response from iView X; check<br>
	 * 									calibration name / identifier<br>
	 * Original signature : <code>int iV_LoadCalibration(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1748</i><br>
	 * @deprecated use the safer methods {@link #iV_LoadCalibration(java.nio.ByteBuffer)} and {@link #iV_LoadCalibration(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_LoadCalibration(Pointer name);
	/**
	 * @brief Loads a previously saved calibration. A calibration has to be saved by using<br>
	 * @ref iV_SaveCalibration.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	name						calibration name / identifier<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_IVIEWX_VERSION	wrong version of iView X<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * @retval	ERR_NO_RESPONSE_FROM_IVIEWX	no response from iView X; check<br>
	 * 									calibration name / identifier<br>
	 * Original signature : <code>int iV_LoadCalibration(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1748</i>
	 */
	int iV_LoadCalibration(ByteBuffer name);
	/**
	 * @brief Writes <TT>logMessage</TT> into log file<br>
	 * <br>
	 * @param	logMessage				message that shall be written to the log file<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_ACCESS_TO_FILE		failed to access log file<br>
	 * Original signature : <code>int iV_Log(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1758</i><br>
	 * @deprecated use the safer methods {@link #iV_Log(java.nio.ByteBuffer)} and {@link #iV_Log(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_Log(Pointer logMessage);
	/**
	 * @brief Writes <TT>logMessage</TT> into log file<br>
	 * <br>
	 * @param	logMessage				message that shall be written to the log file<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_ACCESS_TO_FILE		failed to access log file<br>
	 * Original signature : <code>int iV_Log(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1758</i>
	 */
	int iV_Log(ByteBuffer logMessage);
	/**
	 * @brief Suspend the eye tracking application and disables calculation of gaze data.<br>
	 * The application can be reactivated by calling @ref iV_ContinueEyetracking.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_PauseEyetracking()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1768</i>
	 */
	int iV_PauseEyetracking();
	/**
	 * @brief Pauses gaze data recording. A HED video recording can neither be paused nor continued.<br>
	 * @ref iV_PauseRecording does not return until gaze recording is paused.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_EMPTY_DATA_BUFFER		recording buffer is empty<br>
	 * @retval	ERR_FULL_DATA_BUFFER		data buffer is full<br>
	 * @retval	ERR_PAUSED_DATABUFFER		already in pause state<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_PauseRecording()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1784</i>
	 */
	int iV_PauseRecording();
	/**
	 * @brief Disconnects and closes iView eye tracking server. After this function<br>
	 * has been called no other function or application can communicate<br>
	 * with iView eye tracking server.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_DELETE_SOCKET			failed to delete sockets<br>
	 * @retval	ERR_WRONG_IVIEWX_VERSION	wrong version of iView X<br>
	 * Original signature : <code>int iV_Quit()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1796</i>
	 */
	int iV_Quit();
	/**
	 * @brief Restarts a calibration procedure with a point from the latest calibration process. The<br>
	 * point is specified by its index in the calibration point profile (counted from 1).<br>
	 * If the requested point is not found, an error code will be returned.<br>
	 * The number of calibration points can be retrieved via @ref iV_GetCalibrationQuality.<BR><br>
	 * This function can be used to improve the final calibration quality in cases when some points<br>
	 * from the previous calibration were missed unexpectedly. With this function you can<br>
	 * re-include that point to your calibration.<BR><br>
	 * This function follows the workflow of @ref iV_Calibrate except that @ref iV_SetupCalibration<br>
	 * must not be called after the end of the last calibration and before calling this function.<BR><br>
	 * If CalibrationStruct::visualization was set to 0, @ref iV_RecalibrateOnePoint<br>
	 * returns immediately. The user has to care about the visualization of calibration points.<br>
	 * Information about the current calibration point can be retrieved with<br>
	 * @ref iV_GetCurrentCalibrationPoint or with setting up the calibration callback using<br>
	 * @ref iV_SetCalibrationCallback.<BR><br>
	 * See also @listcalibration<br>
	 * <br>
	 * @retval	RET_SUCCESS						intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED				no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER				the point to recalibrate is not found<br>
	 * @retval	ERR_NOT_CALIBRATED				no previous calibration exists<br>
	 * @retval	ERR_WRONG_DEVICE 				eye tracking device required for this function<br>
	 * 										is not connected<br>
	 * @retval	ERR_WRONG_CALIBRATION_METHOD	eye tracking device required for this<br>
	 * 										calibration method is not connected or the method chosen for<br>
	 * 										recalibration is different to the previous calibration.<br>
	 * Original signature : <code>int iV_RecalibrateOnePoint(int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1825</i>
	 */
	int iV_RecalibrateOnePoint(int number);
	/**
	 * @brief Releases the port for sending TTL trigger.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_COULD_NOT_CLOSE_PORT	failed to close TTL port<br>
	 * Original signature : <code>int iV_ReleaseAOIPort()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1834</i>
	 */
	int iV_ReleaseAOIPort();
	/**
	 * @brief Removes all AOIs with the given name.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiName					name of the AOI which will be removed<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_AOI_ACCESS			failed to access AOI data<br>
	 * Original signature : <code>int iV_RemoveAOI(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1846</i><br>
	 * @deprecated use the safer methods {@link #iV_RemoveAOI(java.nio.ByteBuffer)} and {@link #iV_RemoveAOI(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_RemoveAOI(Pointer aoiName);
	/**
	 * @brief Removes all AOIs with the given name.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	aoiName					name of the AOI which will be removed<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA		no data available<br>
	 * @retval	ERR_AOI_ACCESS			failed to access AOI data<br>
	 * Original signature : <code>int iV_RemoveAOI(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1846</i>
	 */
	int iV_RemoveAOI(ByteBuffer aoiName);
	/**
	 * @brief Resets all calibration points to its default position.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * Original signature : <code>int iV_ResetCalibrationPoints()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1855</i>
	 */
	int iV_ResetCalibrationPoints();
	/**
	 * @brief Saves a calibration with a custom name. To save a calibration<br>
	 * it is required that a successful calibration already has been completed.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	name						calibration name / identifier<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_NOT_CALIBRATED			system is not calibrated<br>
	 * @retval	ERR_WRONG_IVIEWX_VERSION	wrong version of iView X<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * Original signature : <code>int iV_SaveCalibration(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1871</i><br>
	 * @deprecated use the safer methods {@link #iV_SaveCalibration(java.nio.ByteBuffer)} and {@link #iV_SaveCalibration(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_SaveCalibration(Pointer name);
	/**
	 * @brief Saves a calibration with a custom name. To save a calibration<br>
	 * it is required that a successful calibration already has been completed.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	name						calibration name / identifier<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_NOT_CALIBRATED			system is not calibrated<br>
	 * @retval	ERR_WRONG_IVIEWX_VERSION	wrong version of iView X<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * Original signature : <code>int iV_SaveCalibration(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1871</i>
	 */
	int iV_SaveCalibration(ByteBuffer name);
	/**
	 * @brief Writes recorded data buffer to disc. The data recording needs to be stopped using<br>
	 * @ref iV_StopRecording before the data buffer can be saved to given location.<br>
	 * The <TT>filename</TT> can include the path.<br>
	 * If the connected eye tracking device is a HED, scene video buffer is written, too.<br>
	 * @ref iV_SaveData will not return until the data has been saved.<br>
	 * <br>
	 * @param	filename					full path including the filename of the data file being created<br>
	 * @param	description					Optional experiment description tag stored in the idf file.<br>
	 * 									This tag is available in BeGaze and in the text export from an idf file.<br>
	 * @param	user						Optional name of test person.<br>
	 * 									This tag is available in BeGaze and in the text export from an idf file.<br>
	 * @param	overwrite					Overwriting policy.<br>
	 * 									0: do not overwrite file <TT>filename</TT> if it already exists<br>
	 * 									1: overwrite file <TT>filename</TT> if it already exists<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval	ERR_EMPTY_DATA_BUFFER		recording buffer is empty<br>
	 * @retval	ERR_RECORDING_DATA_BUFFER	recording is activated<br>
	 * @retval	ERR_PAUSED_DATA_BUFFER		recording is in pause state<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_SaveData(char*, char*, char*, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1897</i><br>
	 * @deprecated use the safer methods {@link #iV_SaveData(java.nio.ByteBuffer, java.nio.ByteBuffer, java.nio.ByteBuffer, int)} and {@link #iV_SaveData(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int iV_SaveData(Pointer filename, Pointer description, Pointer user, int overwrite);
	/**
	 * @brief Writes recorded data buffer to disc. The data recording needs to be stopped using<br>
	 * @ref iV_StopRecording before the data buffer can be saved to given location.<br>
	 * The <TT>filename</TT> can include the path.<br>
	 * If the connected eye tracking device is a HED, scene video buffer is written, too.<br>
	 * @ref iV_SaveData will not return until the data has been saved.<br>
	 * <br>
	 * @param	filename					full path including the filename of the data file being created<br>
	 * @param	description					Optional experiment description tag stored in the idf file.<br>
	 * 									This tag is available in BeGaze and in the text export from an idf file.<br>
	 * @param	user						Optional name of test person.<br>
	 * 									This tag is available in BeGaze and in the text export from an idf file.<br>
	 * @param	overwrite					Overwriting policy.<br>
	 * 									0: do not overwrite file <TT>filename</TT> if it already exists<br>
	 * 									1: overwrite file <TT>filename</TT> if it already exists<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval	ERR_EMPTY_DATA_BUFFER		recording buffer is empty<br>
	 * @retval	ERR_RECORDING_DATA_BUFFER	recording is activated<br>
	 * @retval	ERR_PAUSED_DATA_BUFFER		recording is in pause state<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_SaveData(char*, char*, char*, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1897</i>
	 */
	int iV_SaveData(ByteBuffer filename, ByteBuffer description, ByteBuffer user, int overwrite);
	/**
	 * @brief Selects a predefined geometry profile. See chapter @ref redgeometry<br>
	 * in the iView X SDK Manual and @listgeometry<br>
	 * <br>
	 * @param	profileName					name of the selected profile which should be selected<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	this feature was not licensed by the API user<br>
	 * Original signature : <code>int iV_SelectREDGeometry(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1911</i><br>
	 * @deprecated use the safer methods {@link #iV_SelectREDGeometry(java.nio.ByteBuffer)} and {@link #iV_SelectREDGeometry(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_SelectREDGeometry(Pointer profileName);
	/**
	 * @brief Selects a predefined geometry profile. See chapter @ref redgeometry<br>
	 * in the iView X SDK Manual and @listgeometry<br>
	 * <br>
	 * @param	profileName					name of the selected profile which should be selected<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	this feature was not licensed by the API user<br>
	 * Original signature : <code>int iV_SelectREDGeometry(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1911</i>
	 */
	int iV_SelectREDGeometry(ByteBuffer profileName);
	/**
	 * @brief Sends a remote command to iView eye tracking server. Please refer to<br>
	 * the iView X help file for further information about remote commands.<br>
	 * Important Note: This function is temporary and will not be supported<br>
	 * in subsequent versions.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @param	etMessage				iView X remote command<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_SendCommand(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1926</i><br>
	 * @deprecated use the safer methods {@link #iV_SendCommand(java.nio.ByteBuffer)} and {@link #iV_SendCommand(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_SendCommand(Pointer etMessage);
	/**
	 * @brief Sends a remote command to iView eye tracking server. Please refer to<br>
	 * the iView X help file for further information about remote commands.<br>
	 * Important Note: This function is temporary and will not be supported<br>
	 * in subsequent versions.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @param	etMessage				iView X remote command<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED		no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_SendCommand(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1926</i>
	 */
	int iV_SendCommand(ByteBuffer etMessage);
	/**
	 * @brief Sends a text message to iView X idf recording data file. If the <TT>etMessage</TT><br>
	 * has the suffix ".jpg", ".bmp", ".png", or ".avi" BeGaze will separate the<br>
	 * data buffer automatically into according trials.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @param	etMessage					Any text message to separate trials (image name containing<br>
	 * 									extensions) or any idf data marker<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_SendImageMessage(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1941</i><br>
	 * @deprecated use the safer methods {@link #iV_SendImageMessage(java.nio.ByteBuffer)} and {@link #iV_SendImageMessage(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_SendImageMessage(Pointer etMessage);
	/**
	 * @brief Sends a text message to iView X idf recording data file. If the <TT>etMessage</TT><br>
	 * has the suffix ".jpg", ".bmp", ".png", or ".avi" BeGaze will separate the<br>
	 * data buffer automatically into according trials.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @param	etMessage					Any text message to separate trials (image name containing<br>
	 * 									extensions) or any idf data marker<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_SendImageMessage(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1941</i>
	 */
	int iV_SendImageMessage(ByteBuffer etMessage);
	/**
	 * @brief Sets a callback function for the AOI hit functions. The function will be called<br>
	 * if the iView eye tracking server has calculated an AOI hit. For usage of this<br>
	 * function AOI's needs to be defined.<br>
	 * See also @listaoi<br>
	 * Important note: Algorithms with high processor usage and long calculation time<br>
	 * shouldn't run within this callback due to a higher probability of data loss<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	pAOIHitCallbackFunction		pointer to AOIHitCallbackFunction<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * Original signature : <code>int iV_SetAOIHitCallback(pDLLSetAOIHit)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1957</i>
	 */
	int iV_SetAOIHitCallback(IViewXAPILibrary.pDLLSetAOIHit pAOIHitCallbackFunction);
	/**
	 * @brief Sets a callback function for the calibration and validation process. The<br>
	 * callback function will be called after a calibration or validation was started,<br>
	 * after a calibration or validation point was accepted, or if the calibration or<br>
	 * validation was finished successfully or unsuccessfully.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	pCalibrationCallbackFunction	pointer to CalibrationCallbackFunction<br>
	 * <br>
	 * @retval	RET_SUCCESS						intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER				parameter out of range<br>
	 * Original signature : <code>int iV_SetCalibrationCallback(pDLLSetCalibrationPoint)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1971</i>
	 */
	int iV_SetCalibrationCallback(IViewXAPILibrary.pDLLSetCalibrationPoint pCalibrationCallbackFunction);
	/**
	 * @brief Defines a customized timeout for how long @ref iV_Connect tries to connect<br>
	 * to iView eye tracking server.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @param	time					the time [sec] iV_Connect is waiting for iView X response<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_SetConnectionTimeout(int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1983</i>
	 */
	int iV_SetConnectionTimeout(int time);
	/**
	 * @brief Sets a callback function for the event data. The function will be called if a<br>
	 * real-time detected fixation has been started or ended.<br>
	 * Important note: Algorithms with high processor usage and long calculation time<br>
	 * shouldn't run within this callback due to a higher probability of data loss.<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	pEventCallbackFunction		pointer to EventCallbackFunction<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_SetEventCallback(pDLLSetEvent)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:1998</i>
	 */
	int iV_SetEventCallback(IViewXAPILibrary.pDLLSetEvent pEventCallbackFunction);
	/**
	 * @brief Defines the detection parameter for online fixation detection algorithm.<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	minDuration				minimum fixation duration [ms]<br>
	 * @param	maxDispersion			maximum dispersion [pixel] for head tracking systems<br>
	 * 								or [deg] for non head tracking systems<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_SetEventDetectionParameter(int, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2011</i>
	 */
	int iV_SetEventDetectionParameter(int minDuration, int maxDispersion);
	/**
	 * @brief Sets a callback function for the eye image data. The function will be called if a<br>
	 * new eye image is available. The image format is monochrome 8bpp.<br>
	 * Important note: Algorithms with high processor usage and long calculation time<br>
	 * shouldn't run within this callback due to a higher probability of data loss.<br>
	 * <br>
	 * @param	pEyeImageCallbackFunction	pointer to EyeImageCallbackFunction<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_SetEyeImageCallback(pDLLSetEyeImage)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2025</i>
	 */
	int iV_SetEyeImageCallback(IViewXAPILibrary.pDLLSetEyeImage pEyeImageCallbackFunction);
	/**
	 * @brief Validates the customer license (only for OEM devices).<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @param	licenseKey				provided license key<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_SetLicense(const char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2036</i><br>
	 * @deprecated use the safer methods {@link #iV_SetLicense(java.lang.String)} and {@link #iV_SetLicense(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_SetLicense(Pointer licenseKey);
	/**
	 * @brief Validates the customer license (only for OEM devices).<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @param	licenseKey				provided license key<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_SetLicense(const char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2036</i>
	 */
	int iV_SetLicense(String licenseKey);
	/**
	 * @brief Defines the logging behavior of iView X SDK.<br>
	 * <br>
	 * @param	logLevel				log level<br>
	 * 								multiple log levels can can be combined<br>
	 * @param	filename				filename of log file<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * @retval	ERR_ACCESS_TO_FILE		failed to access log file<br>
	 * Original signature : <code>int iV_SetLogger(int, char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2049</i><br>
	 * @deprecated use the safer methods {@link #iV_SetLogger(int, java.nio.ByteBuffer)} and {@link #iV_SetLogger(int, com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_SetLogger(int logLevel, Pointer filename);
	/**
	 * @brief Defines the logging behavior of iView X SDK.<br>
	 * <br>
	 * @param	logLevel				log level<br>
	 * 								multiple log levels can can be combined<br>
	 * @param	filename				filename of log file<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * @retval	ERR_ACCESS_TO_FILE		failed to access log file<br>
	 * Original signature : <code>int iV_SetLogger(int, char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2049</i>
	 */
	int iV_SetLogger(int logLevel, ByteBuffer filename);
	/**
	 * @brief Define the RED and RED-m stand alone and monitor integrated geometry.<br>
	 * See chapter @ref redgeometry in the iView X SDK Manual<br>
	 * and @listgeometry for details.<br>
	 * <br>
	 * @param	redGeometry					see reference information for @ref REDGeometryStruct<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_SetREDGeometry(REDGeometryStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2065</i>
	 */
	int iV_SetREDGeometry(REDGeometryStruct redGeometry);
	/**
	 * @brief Defines a fixed resolution independent to the screen<br>
	 * resolution of chosen display device defined in @ref iV_SetupCalibration function.<br>
	 * <br>
	 * @param	stimulusWidth			horizontal resolution of stimulus screen [pixel]<br>
	 * @param	stimulusHeight			vertical resolution of stimulus screen [pixel]<br>
	 * <br>
	 * @retval	RET_SUCCESS				intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER		parameter out of range<br>
	 * Original signature : <code>int iV_SetResolution(int, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2077</i>
	 */
	int iV_SetResolution(int stimulusWidth, int stimulusHeight);
	/**
	 * @brief Sets a callback function for the raw sample data. The function will be called<br>
	 * if iView eye tracking server has calculated a new data sample.<br>
	 * Important note: Algorithms with high processor usage and long calculation time<br>
	 * shouldn't run within this callback due to a higher probability of data loss.<br>
	 * See also @listdataacquisition<br>
	 * <br>
	 * @param	pSampleCallbackFunction		pointer to SampleCallbackFunction<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * Original signature : <code>int iV_SetSampleCallback(pDLLSetSample)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2091</i>
	 */
	int iV_SetSampleCallback(IViewXAPILibrary.pDLLSetSample pSampleCallbackFunction);
	/**
	 * @brief Sets a callback function for the scene video image data. The function will be<br>
	 * called if a new scene video image is available. The image format is RGB 24bpp.<br>
	 * Important note: Algorithms with high processor usage and long calculation time<br>
	 * shouldn't run within this callback due to a higher probability of data loss.<br>
	 * <br>
	 * @param	pSceneVideoCallbackFunction		pointer to SceneVideoCallbackFunction<br>
	 * <br>
	 * @retval	RET_SUCCESS						intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER				parameter out of range<br>
	 * Original signature : <code>int iV_SetSceneVideoCallback(pDLLSetSceneVideo)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2104</i>
	 */
	int iV_SetSceneVideoCallback(IViewXAPILibrary.pDLLSetSceneVideo pSceneVideoCallbackFunction);
	/**
	 * @brief This function requests the iView eye tracking server to switch the eye tracking frequency to the specified value.<br>
	 * <br>
	 * @retval RET_SUCCESS			intended functionality has been fulfilled<br>
	 * @retval ERR_NOT_CONNECTED	no connection established<br>
	 * @retval ERR_WRONG_DEVICE		eye tracking device required for this function is not connected<br>
	 * Original signature : <code>int iV_SetSpeedMode(int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2113</i>
	 */
	int iV_SetSpeedMode(int speedMode);
	/**
	 * @brief Sets a callback function for the tracking monitor image data. The function will be<br>
	 * called if a new tracking monitor image was calculated. The image format is RGB 24bpp.<br>
	 * Important note: Algorithms with high processor usage and long calculation time<br>
	 * shouldn't run within this callback due to a higher probability of data loss.<br>
	 * <br>
	 * @param	pTrackingMonitorCallbackFunction	pointer to TrackingMonitorCallbackFunction<br>
	 * <br>
	 * @retval	RET_SUCCESS							intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER					parameter out of range<br>
	 * Original signature : <code>int iV_SetTrackingMonitorCallback(pDLLSetTrackingMonitor)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2126</i>
	 */
	int iV_SetTrackingMonitorCallback(IViewXAPILibrary.pDLLSetTrackingMonitor pTrackingMonitorCallbackFunction);
	/**
	 * @brief Sets iView eye tracking server tracking parameters. See @ref trackerParameter subsection and<br>
	 * iView eye tracking server manual for further explanations.<br>
	 * <br>
	 * @param	ET_PARAM_EYE				select specific eye<br>
	 * @param	ET_PARAM					select parameter that shall be set<br>
	 * @param	value						new value for selected parameter<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	the features requested by means of<br>
	 * 									the ET_PARAM parameter is not licensed<br>
	 * Original signature : <code>int iV_SetTrackingParameter(int, int, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2142</i>
	 */
	int iV_SetTrackingParameter(int ET_PARAM_EYE, int ET_PARAM, int value);
	/**
	 * @brief Sets the calibration and validation visualization parameter.<br>
	 * See also @listcalibration<br>
	 * <br>
	 * @param	calibrationData					see reference information for "CalibrationStruct"<br>
	 * <br>
	 * @retval	RET_SUCCESS						intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER				parameter out of range<br>
	 * @retval	ERR_WRONG_DEVICE				eye tracking device required for this<br>
	 * 										function is not connected<br>
	 * @retval	ERR_WRONG_CALIBRATION_METHOD	eye tracking device required for this<br>
	 * 										calibration method is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED		at least one of the features requested by means of<br>
	 * 										the calibrationData parameters are not licensed<br>
	 * Original signature : <code>int iV_SetupCalibration(CalibrationStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2159</i>
	 */
	int iV_SetupCalibration(CalibrationStruct calibrationData);
	/**
	 * @brief Enables or disables the debug mode for the current connection. The debug mode disables the automatic <br>
	 * connection termination after 5 seconds of an unresponsive server or client. This can happen e.g. during<br>
	 * debugging a client application.<br>
	 * Beware: the debug mode must not be enabled for production code, as it makes the connection status detection<br>
	 * of all API functions unreliable!<br>
	 * <br>
	 * @param	enableDebugMode					specifies whether the debug mode shall be enabled<br>
	 * 											(1) or disabled (0)<br>
	 * <br>
	 * @retval	RET_SUCCESS						intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED				no connection established<br>
	 * Original signature : <code>int iV_SetupDebugMode(int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2174</i>
	 */
	int iV_SetupDebugMode(int enableDebugMode);
	/**
	 * @brief Enables or disables the LPT signal recording functionality. When enabling the LPT port signal<br>
	 * recording the LPT port name has to be specified. The LPT ports available for recording can be queried by<br>
	 * using the  @ref iV_GetAvailableLptPorts API function.<br>
	 * The function must not be called during a running recording.<br>
	 * <br>
	 * @param	portName						a string referencing the LPT port to be used. Appropriate values<br>
	 * 											can be queried using the @ref iV_GetAvailableLptPorts function<br>
	 * @param	enableRecording					specifies whether recording of LPT port signal shall be enabled<br>
	 * 											(1) or disabled (0)<br>
	 * <br>
	 * @retval	RET_SUCCESS						intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER				the specified port is not available<br>
	 * @retval	ERR_IVIEWX_ACCESS_INCOMPLETE	recording in progress<br>
	 * @retval	ERR_NOT_CONNECTED				no connection established<br>
	 * Original signature : <code>int iV_SetupLptRecording(const char*, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2192</i><br>
	 * @deprecated use the safer methods {@link #iV_SetupLptRecording(java.lang.String, int)} and {@link #iV_SetupLptRecording(com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated 
	int iV_SetupLptRecording(Pointer portName, int enableRecording);
	/**
	 * @brief Enables or disables the LPT signal recording functionality. When enabling the LPT port signal<br>
	 * recording the LPT port name has to be specified. The LPT ports available for recording can be queried by<br>
	 * using the  @ref iV_GetAvailableLptPorts API function.<br>
	 * The function must not be called during a running recording.<br>
	 * <br>
	 * @param	portName						a string referencing the LPT port to be used. Appropriate values<br>
	 * 											can be queried using the @ref iV_GetAvailableLptPorts function<br>
	 * @param	enableRecording					specifies whether recording of LPT port signal shall be enabled<br>
	 * 											(1) or disabled (0)<br>
	 * <br>
	 * @retval	RET_SUCCESS						intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER				the specified port is not available<br>
	 * @retval	ERR_IVIEWX_ACCESS_INCOMPLETE	recording in progress<br>
	 * @retval	ERR_NOT_CONNECTED				no connection established<br>
	 * Original signature : <code>int iV_SetupLptRecording(const char*, int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2192</i>
	 */
	int iV_SetupLptRecording(String portName, int enableRecording);
	/**
	 * @brief Sets and resets the interaction keys during the calibration and validation process. If enableKeys<br>
	 * will be set to 0 all available user interaction (SPACE for accepting calibration/validation<br>
	 * points and ESC for aborting calibration/validation) will be disabled. If enableKeys will be set to<br>
	 * 1 (default) the SPACE and ESC buttons are available during the calibration and the validation process.<br>
	 * See also @listvalidation @listcalibration<br>
	 * Original signature : <code>int iV_SetUseCalibrationKeys(int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2202</i>
	 */
	int iV_SetUseCalibrationKeys(int enableKeys);
	/**
	 * @brief The validated accuracy results will be visualized in a separate window. Before the<br>
	 * image can be drawn the calibration needs to be performed with @ref iV_Calibrate and<br>
	 * validated with @ref iV_Validate.<br>
	 * See also @listvalidation<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_NO_VALID_DATA			no data available<br>
	 * @retval	RET_WINDOW_IS_OPEN			window is already open<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_NOT_CALIBRATED			system is not calibrated<br>
	 * @retval	ERR_NOT_VALIDATED			system is not validated<br>
	 * Original signature : <code>int iV_ShowAccuracyMonitor()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2217</i>
	 */
	int iV_ShowAccuracyMonitor();
	/**
	 * @brief Visualizes eye image in a separate window while the participant will be tracked.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_WINDOW_IS_OPEN			window is already open<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_ShowEyeImageMonitor()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2229</i>
	 */
	int iV_ShowEyeImageMonitor();
	/**
	 * @brief Visualizes scene video in separate window (available for HED devices only).<br>
	 * See also @listhedscene<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_WINDOW_IS_OPEN			window is already open<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * Original signature : <code>int iV_ShowSceneVideoMonitor()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2241</i>
	 */
	int iV_ShowSceneVideoMonitor();
	/**
	 * @brief Visualizes RED tracking monitor in a separate window. It shows the position<br>
	 * of the participant related to the eye tracking device and indicates (using arrows)<br>
	 * if the participant is not positioned in the center of the tracking head box.<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	RET_WINDOW_IS_OPEN			window is already open<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * Original signature : <code>int iV_ShowTrackingMonitor()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2254</i>
	 */
	int iV_ShowTrackingMonitor();
	/**
	 * @brief Starts the iView eye tracking server application. Depending on the PC,<br>
	 * it may take several seconds to start the iView eye tracking server application.<br>
	 * The connection needs to be established separately using @ref iV_Connect. The connection<br>
	 * timeout can be extended using @ref iV_SetConnectionTimeout.<br>
	 * See also @listsystemstartstop<br>
	 * <br>
	 * @param	etApplication				the iView eye tracking server application which will be started<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_COULD_NOT_CONNECT		failed to establish connection<br>
	 * @retval	ERR_IVIEWX_NOT_FOUND		failed to start iViewX application<br>
	 * @retval  ERR_CAMERA_NOT_FOUND		no eye tracker connected<br>
	 * Original signature : <code>int iV_Start(ETApplication)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2270</i>
	 */
	int iV_Start(int etApplication);
	/**
	 * @brief Starts gaze data recording and scene video recording (if connected eye tracking<br>
	 * device is "HED"). @ref iV_StartRecording does not return until gaze and scene video<br>
	 * recording is started. The data streaming needs to be stopped by using @ref iV_StopRecording<br>
	 * before it can be saved using @ref iV_SaveData.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this<br>
	 * 									function is not connected<br>
	 * @retval	ERR_RECORDING_DATA_BUFFER	recording is activated<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_StartRecording()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2286</i>
	 */
	int iV_StartRecording();
	/**
	 * @brief Stops gaze data recording and scene video recording (if connected eye tracking<br>
	 * device is "HED"). @ref iV_StopRecording does not return until gaze and scene video<br>
	 * recording is stopped. This function needs to be called before the data can<br>
	 * be saved using @ref iV_SaveData.<br>
	 * See also @listeyedatarecording<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function<br>
	 * 									is not connected<br>
	 * @retval	ERR_EMPTY_DATA_BUFFER		recording buffer is empty<br>
	 * @retval	ERR_FEATURE_NOT_LICENSED	feature not covered by your license<br>
	 * Original signature : <code>int iV_StopRecording()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2302</i>
	 */
	int iV_StopRecording();
	/**
	 * @brief Sends a TTL value to defined port. Define a port with @ref iV_DefineAOIPort.<br>
	 * See also @listaoi<br>
	 * <br>
	 * @param	value						value which will be sends out as TTL signal<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_WRONG_PARAMETER			parameter out of range<br>
	 * Original signature : <code>int iV_TestTTL(int)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2313</i>
	 */
	int iV_TestTTL(int value);
	/**
	 * @brief Starts a validation procedure. To proceed, the participant needs to be tracked and<br>
	 * has to fixate on the validation point. Depending on the validation settings (which can<br>
	 * be changed using @ref iV_SetupCalibration and @ref iV_SetUseCalibrationKeys) the user<br>
	 * can accept the validation points manually (by pressing SPACE or calling @ref iV_AcceptCalibrationPoint)<br>
	 * or abort the validation (by pressing ESC or calling @ref iV_AbortCalibration). If the validation<br>
	 * will be visualized by the API (CalibrationStruct::visualization is set to 1)<br>
	 * the function won't return until the validation has been finished (closed automatically)<br>
	 * or aborted (ESC).<br>
	 * If the the CalibrationStruct::visualization is set to 0 iV_Validate returns<br>
	 * immediately. The user has to care about the visualization of validation points. Information<br>
	 * about the current validation point can be retrieved with @ref iV_GetCurrentCalibrationPoint<br>
	 * or with setting up the calibration callback using @ref iV_SetCalibrationCallback.<BR><br>
	 * See also @listvalidation @listcalibration<br>
	 * <br>
	 * @retval	RET_SUCCESS					intended functionality has been fulfilled<br>
	 * @retval	ERR_NOT_CONNECTED			no connection established<br>
	 * @retval	ERR_NOT_CALIBRATED			system is not calibrated<br>
	 * @retval	ERR_WRONG_DEVICE			eye tracking device required for this function is not connected<br>
	 * Original signature : <code>int iV_Validate()</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2335</i>
	 */
	int iV_Validate();
	/**
	 * @brief Deprecated. Please use @ref iV_SetREDGeometry instead.<br>
	 * Original signature : <code>int iV_SetupMonitorAttachedGeometry(MonitorAttachedGeometryStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2391</i>
	 */
	int iV_SetupMonitorAttachedGeometry(IViewXAPILibrary.MonitorAttachedGeometryStruct monitorAttachedGeometry);
	/**
	 * @brief Deprecated. Please use @ref iV_SetREDGeometry instead.<br>
	 * Original signature : <code>int iV_SetupStandAloneMode(StandAloneModeGeometryStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2397</i>
	 */
	int iV_SetupStandAloneMode(IViewXAPILibrary.StandAloneModeGeometryStruct standAloneModeGeometry);
	/**
	 * @brief Deprecated. Please use @ref iV_SetREDGeometry instead.<br>
	 * Original signature : <code>int iV_SetupREDMonitorAttachedGeometry(REDMonitorAttachedGeometryStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2403</i>
	 */
	int iV_SetupREDMonitorAttachedGeometry(REDMonitorAttachedGeometryStruct attachedModeGeometry);
	/**
	 * @brief Deprecated. Please use @ref iV_SetREDGeometry instead.<br>
	 * Original signature : <code>int iV_SetupREDStandAloneMode(REDStandAloneModeStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2409</i>
	 */
	int iV_SetupREDStandAloneMode(REDStandAloneModeStruct standAloneModeGeometry);
	/**
	 * @brief Deprecated. Please use @ref iV_GetREDGeometry instead.<br>
	 * Original signature : <code>int iV_GetMonitorAttachedGeometry(char[256], MonitorAttachedGeometryStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2415</i><br>
	 * @deprecated use the safer methods {@link #iV_GetMonitorAttachedGeometry(java.nio.ByteBuffer, iviewxapi.IViewXAPILibrary.MonitorAttachedGeometryStruct)} and {@link #iV_GetMonitorAttachedGeometry(com.sun.jna.Pointer, iviewxapi.IViewXAPILibrary.MonitorAttachedGeometryStruct)} instead
	 */
	@Deprecated 
	int iV_GetMonitorAttachedGeometry(Pointer profileName, IViewXAPILibrary.MonitorAttachedGeometryStruct monitorAttachedGeometry);
	/**
	 * @brief Deprecated. Please use @ref iV_GetREDGeometry instead.<br>
	 * Original signature : <code>int iV_GetMonitorAttachedGeometry(char[256], MonitorAttachedGeometryStruct*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2415</i>
	 */
	int iV_GetMonitorAttachedGeometry(ByteBuffer profileName, IViewXAPILibrary.MonitorAttachedGeometryStruct monitorAttachedGeometry);
	/**
	 * @brief Deprecated. Please use @ref iV_SelectREDGeometry instead.<br>
	 * Original signature : <code>int iV_SetGeometryProfile(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2421</i><br>
	 * @deprecated use the safer methods {@link #iV_SetGeometryProfile(java.nio.ByteBuffer)} and {@link #iV_SetGeometryProfile(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_SetGeometryProfile(Pointer profileName);
	/**
	 * @brief Deprecated. Please use @ref iV_SelectREDGeometry instead.<br>
	 * Original signature : <code>int iV_SetGeometryProfile(char*)</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2421</i>
	 */
	int iV_SetGeometryProfile(ByteBuffer profileName);
	/**
	 * @brief Deprecated. Please use @ref iV_DeleteREDGeometry instead.<br>
	 * Original signature : <code>int iV_DeleteMonitorAttachedGeometry(char[256])</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2426</i><br>
	 * @deprecated use the safer methods {@link #iV_DeleteMonitorAttachedGeometry(java.nio.ByteBuffer)} and {@link #iV_DeleteMonitorAttachedGeometry(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_DeleteMonitorAttachedGeometry(Pointer setupName);
	/**
	 * @brief Deprecated. Please use @ref iV_DeleteREDGeometry instead.<br>
	 * Original signature : <code>int iV_DeleteMonitorAttachedGeometry(char[256])</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2426</i>
	 */
	int iV_DeleteMonitorAttachedGeometry(ByteBuffer setupName);
	/**
	 * @brief Deprecated. Please use @ref iV_DeleteREDGeometry instead.<br>
	 * Original signature : <code>int iV_DeleteStandAloneGeometry(char[256])</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2431</i><br>
	 * @deprecated use the safer methods {@link #iV_DeleteStandAloneGeometry(java.nio.ByteBuffer)} and {@link #iV_DeleteStandAloneGeometry(com.sun.jna.Pointer)} instead
	 */
	@Deprecated 
	int iV_DeleteStandAloneGeometry(Pointer setupName);
	/**
	 * @brief Deprecated. Please use @ref iV_DeleteREDGeometry instead.<br>
	 * Original signature : <code>int iV_DeleteStandAloneGeometry(char[256])</code><br>
	 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:2431</i>
	 */
	int iV_DeleteStandAloneGeometry(ByteBuffer setupName);
	public static class StandAloneModeGeometryStruct extends PointerType {
		public StandAloneModeGeometryStruct(Pointer address) {
			super(address);
		}
		public StandAloneModeGeometryStruct() {
			super();
		}
	};
	public static class MonitorAttachedGeometryStruct extends PointerType {
		public MonitorAttachedGeometryStruct(Pointer address) {
			super(address);
		}
		public MonitorAttachedGeometryStruct() {
			super();
		}
	};
}
