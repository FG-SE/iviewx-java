package de.unihannover.se.iviewxjava.iviewxapi;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
/**
 * @struct SampleStruct32
<br>
 * <br>
 * @brief This struct provides information about a eye data samples.
<br>
 * To update information in @ref SampleStruct32 use the function
<br>
 * @ref iV_GetSample32. The difference to @ref SampleStruct is that
<br>
 * the timestamp will be stored in milliseconds instead of microseconds.<br>
 * <i>native declaration : C:\Program Files\SMI\iView X SDK\include\iViewXAPI.h:520</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SampleStruct32 extends Structure {
	public double timestamp;
	/** C type : EyeDataStruct */
	public EyeDataStruct leftEye;
	/** C type : EyeDataStruct */
	public EyeDataStruct rightEye;
	public int planeNumber;
	public SampleStruct32() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("timestamp", "leftEye", "rightEye", "planeNumber");
	}
	/**
	 * @param leftEye C type : EyeDataStruct<br>
	 * @param rightEye C type : EyeDataStruct
	 */
	public SampleStruct32(double timestamp, EyeDataStruct leftEye, EyeDataStruct rightEye, int planeNumber) {
		super();
		this.timestamp = timestamp;
		this.leftEye = leftEye;
		this.rightEye = rightEye;
		this.planeNumber = planeNumber;
	}
	public SampleStruct32(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends SampleStruct32 implements Structure.ByReference {
		
	};
	public static class ByValue extends SampleStruct32 implements Structure.ByValue {
		
	};
}
